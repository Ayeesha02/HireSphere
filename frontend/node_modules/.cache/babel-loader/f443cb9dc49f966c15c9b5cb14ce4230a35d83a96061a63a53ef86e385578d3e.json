{"ast":null,"code":"import api from './api';\n\n// Custom JWT decode function\nconst decodeToken = token => {\n  try {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n    const decoded = JSON.parse(jsonPayload);\n    console.log('Decoded token:', decoded); // Debug log\n    return decoded;\n  } catch (e) {\n    console.error('Failed to decode token:', e);\n    return {};\n  }\n};\nexport const login = async (email, password, role) => {\n  const endpoint = role === 'recruiter' ? '/recruiters/login' : '/candidates/login';\n  const response = await api.post(endpoint, {\n    email,\n    password\n  });\n  const token = response.data.token;\n  const decoded = decodeToken(token);\n  const backendRole = decoded.role ? decoded.role.toLowerCase() : null;\n\n  // If role isn’t in token, assume endpoint implies role (temporary fix)\n  if (!backendRole) {\n    console.warn('Role not found in token, assuming endpoint role');\n    return token; // Skip role check for now\n  }\n  if (backendRole !== role.toLowerCase()) {\n    throw new Error('Selected role does not match your account type.');\n  }\n  return token;\n};\nexport const signUp = async (data, role) => {\n  const endpoint = role === 'recruiter' ? '/recruiters/register/recruiter' : '/candidates/register';\n  await api.post(endpoint, data);\n};","map":{"version":3,"names":["api","decodeToken","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","decoded","JSON","parse","console","log","e","error","login","email","password","role","endpoint","response","post","data","backendRole","toLowerCase","warn","Error","signUp"],"sources":["/Users/ayeesha/Ayeesha/PROJECT/FINAL_YEAR_PROJECT_3144204/frontend/src/service/auth.js"],"sourcesContent":["import api from './api';\n\n// Custom JWT decode function\nconst decodeToken = (token) => {\n  try {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n      atob(base64)\n        .split('')\n        .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n        .join('')\n    );\n    const decoded = JSON.parse(jsonPayload);\n    console.log('Decoded token:', decoded); // Debug log\n    return decoded;\n  } catch (e) {\n    console.error('Failed to decode token:', e);\n    return {};\n  }\n};\n\nexport const login = async (email, password, role) => {\n  const endpoint = role === 'recruiter' ? '/recruiters/login' : '/candidates/login';\n  const response = await api.post(endpoint, { email, password });\n  const token = response.data.token;\n  const decoded = decodeToken(token);\n  const backendRole = decoded.role ? decoded.role.toLowerCase() : null;\n\n  // If role isn’t in token, assume endpoint implies role (temporary fix)\n  if (!backendRole) {\n    console.warn('Role not found in token, assuming endpoint role');\n    return token; // Skip role check for now\n  }\n\n  if (backendRole !== role.toLowerCase()) {\n    throw new Error('Selected role does not match your account type.');\n  }\n  return token;\n};\n\nexport const signUp = async (data, role) => {\n  const endpoint = role === 'recruiter' ? '/recruiters/register/recruiter' : '/candidates/register';\n  await api.post(endpoint, data);\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAC7B,IAAI;IACF,MAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CACpCC,IAAI,CAACJ,MAAM,CAAC,CACTD,KAAK,CAAC,EAAE,CAAC,CACTM,GAAG,CAAEC,CAAC,IAAK,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CACjEC,IAAI,CAAC,EAAE,CACZ,CAAC;IACD,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACX,WAAW,CAAC;IACvCY,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,OAAO,CAAC,CAAC,CAAC;IACxC,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOK,CAAC,EAAE;IACVF,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAED,CAAC,CAAC;IAC3C,OAAO,CAAC,CAAC;EACX;AACF,CAAC;AAED,OAAO,MAAME,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;EACpD,MAAMC,QAAQ,GAAGD,IAAI,KAAK,WAAW,GAAG,mBAAmB,GAAG,mBAAmB;EACjF,MAAME,QAAQ,GAAG,MAAM5B,GAAG,CAAC6B,IAAI,CAACF,QAAQ,EAAE;IAAEH,KAAK;IAAEC;EAAS,CAAC,CAAC;EAC9D,MAAMvB,KAAK,GAAG0B,QAAQ,CAACE,IAAI,CAAC5B,KAAK;EACjC,MAAMc,OAAO,GAAGf,WAAW,CAACC,KAAK,CAAC;EAClC,MAAM6B,WAAW,GAAGf,OAAO,CAACU,IAAI,GAAGV,OAAO,CAACU,IAAI,CAACM,WAAW,CAAC,CAAC,GAAG,IAAI;;EAEpE;EACA,IAAI,CAACD,WAAW,EAAE;IAChBZ,OAAO,CAACc,IAAI,CAAC,iDAAiD,CAAC;IAC/D,OAAO/B,KAAK,CAAC,CAAC;EAChB;EAEA,IAAI6B,WAAW,KAAKL,IAAI,CAACM,WAAW,CAAC,CAAC,EAAE;IACtC,MAAM,IAAIE,KAAK,CAAC,iDAAiD,CAAC;EACpE;EACA,OAAOhC,KAAK;AACd,CAAC;AAED,OAAO,MAAMiC,MAAM,GAAG,MAAAA,CAAOL,IAAI,EAAEJ,IAAI,KAAK;EAC1C,MAAMC,QAAQ,GAAGD,IAAI,KAAK,WAAW,GAAG,gCAAgC,GAAG,sBAAsB;EACjG,MAAM1B,GAAG,CAAC6B,IAAI,CAACF,QAAQ,EAAEG,IAAI,CAAC;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}